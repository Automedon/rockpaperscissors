{"version":3,"sources":["img/paper.png","img/rock.png","img/rock-paper-scissors-icon-5.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Choice","styled","div","Choices","ScoreBoard","Body","Badge","props","id","Result","App","useState","score","setScore","user","setUser","comp","setComp","computer","weapons","setWeapons","whichWeapon","weapon","whoWin","u","arr","c","Math","abs","round","random","length","getWeapon","e","currentTarget","className","onClick","src","rock","alt","scissors","paper","style","color","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,wD,s+DCQ3C,IAAMC,EAASC,IAAOC,IAAV,KAYNC,EAAUF,IAAOC,IAAV,KAKPE,EAAaH,IAAOC,IAAV,KAYVG,EAAOJ,IAAOC,IAAV,KAsBJI,EAAQL,IAAOC,IAAV,IAQD,SAAAK,GAAK,MAAkB,eAAbA,EAAMC,GAAsB,QAAU,UAGpDC,EAASR,IAAOC,IAAV,KAwGGQ,MA5Ff,WAAgB,IAAD,EACWC,mBAAS,sBADpB,mBACRC,EADQ,KACDC,EADC,OAESF,mBAAS,GAFlB,mBAERG,EAFQ,KAEFC,EAFE,OAGSJ,mBAAS,GAHlB,mBAGRK,EAHQ,KAGFC,EAHE,OAIeN,mBAAS,CACnCG,KAAM,GACNI,SAAU,KANC,mBAIRC,EAJQ,KAICC,EAJD,KAQTC,EAAc,SAAAC,GAChB,MAAe,MAAXA,EAAuB,WACZ,MAAXA,EAAuB,QACZ,MAAXA,EAAuB,YAA3B,GAEIC,EAAS,SAAAC,GACb,IAAMC,EAAM,CAAC,IAAK,IAAK,KACjBC,EAAID,EAAIE,KAAKC,IAAID,KAAKE,MAAMF,KAAKG,SAAWL,EAAIM,OAAS,KAC3DP,IAAME,GAAGb,EAAS,OACZ,MAANW,GAAmB,MAANE,IACfb,EAAS,yCACTI,EAAQD,EAAO,IAEP,MAANQ,GAAmB,MAANE,IACfb,EAAS,kCACTE,EAAQD,EAAO,IAEP,MAANU,GAAmB,MAANE,IACfb,EAAS,yCACTI,EAAQD,EAAO,IAEP,MAANQ,GAAmB,MAANE,IACfb,EAAS,iCACTE,EAAQD,EAAO,IAEP,MAANU,GAAmB,MAANE,IACfb,EAAS,2CACTI,EAAQD,EAAO,IAEP,MAANQ,GAAmB,MAANE,IACfb,EAAS,mCACTE,EAAQD,EAAO,IAEjBM,E,qVAAW,CAAD,GAAMD,EAAN,CAAeL,KAAMO,EAAYG,GAAIN,SAAUG,EAAYK,OAEjEM,EAAY,SAAAC,GAChB,IAAMT,EAAIS,EAAEC,cAAc1B,GAC1Be,EAAOC,IAGT,OACE,kBAACnB,EAAD,KACE,gCACE,oDAEF,kBAACD,EAAD,KACE,kBAACE,EAAD,CAAOE,GAAG,aAAa2B,UAAU,SAAjC,QAGA,kBAAC7B,EAAD,CAAOE,GAAG,iBAAiB2B,UAAU,SAArC,QAGA,0BAAM3B,GAAG,cAAcM,GAPzB,IAQE,0BAAMN,GAAG,kBAAkBQ,IAE7B,kBAACP,EAAD,KACE,2BAAIG,IAEN,kBAACT,EAAD,KACE,kBAACH,EAAD,CAAQQ,GAAG,IAAI4B,QAASJ,GACtB,yBAAKK,IAAKC,IAAMC,IAAI,UAEtB,kBAACvC,EAAD,CAAQQ,GAAG,IAAI4B,QAASJ,GACtB,yBAAKK,IAAKG,IAAUD,IAAI,cAE1B,kBAACvC,EAAD,CAAQQ,GAAG,IAAI4B,QAASJ,GACtB,yBAAKK,IAAKI,IAAOF,IAAI,YAIxBpB,EAAQL,KACP,uBAAGN,GAAG,cAAN,mBACmBW,EAAQL,KAD3B,0BAEGK,EAAQD,SAFX,MAKA,wBAAIwB,MAAO,CAAEC,MAAO,QAASC,UAAW,WAAxC,0BC1JYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.77883fb6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/paper.d203c331.png\";","module.exports = __webpack_public_path__ + \"static/media/rock.02de7907.png\";","module.exports = __webpack_public_path__ + \"static/media/rock-paper-scissors-icon-5.e4eec66b.jpg\";","import React, { useState } from \"react\";\nimport paper from \"./img/paper.png\";\nimport rock from \"./img/rock.png\";\nimport scissors from \"./img/rock-paper-scissors-icon-5.jpg\";\nimport styled from \"styled-components\";\n\n//Yes, I know that it need to be refactored. Sorry about that. It just like a playground.\n\nconst Choice = styled.div`\n  display: inline-block;\n  margin: 1px;\n\n  img:hover {\n    cursor: pointer;\n  }\n  img {\n    width: 100px;\n    height: 100px;\n  }\n`;\nconst Choices = styled.div`\n  margin: 50px 0;\n  text-align: center;\n`;\n\nconst ScoreBoard = styled.div`\n  border: 3px solid white;\n  width: 200px;\n  margin: 20px auto;\n  color: white;\n  font-size: 40px;\n  border-radius: 40px;\n  text-align: center;\n  padding: 15px 20px;\n  font-family: \"Asap\";\n  position: relative;\n`;\nconst Body = styled.div`\n  @import url(\"https://fonts.googleapis.com/css?family=Asap:400,500,700\");\n  height: 100vh;\n  background: #24272e;\n  header {\n    padding: 20px;\n    background: white;\n    h1 {\n      color: #24272e;\n      text-align: center;\n\n      font-family: \"Asap\";\n    }\n  }\n  #action-msg {\n    color: white;\n    text-align: center;\n    font-family: \"Asap\";\n    font-weight: bold;\n    font-size: 20px;\n  }\n`;\nconst Badge = styled.div`\n  background: #e25840;\n  color: white;\n  font-size: 14px;\n  padding: 2px 10px;\n  font-family: \"Asap\";\n  position: absolute;\n  text-align: center;\n  left: ${props => (props.id === \"user-label\" ? \"-25px\" : \"215px\")};\n  top: 30px;\n`;\nconst Result = styled.div`\n  font-size: 32px;\n  color: white;\n  font-weight: bold;\n  p {\n    text-align: center;\n    @media (max-width: 768px) {\n      font-size: 16px;\n    }\n  }\n`;\n\nfunction App() {\n  let [score, setScore] = useState(\"Choose your weapon\");\n  let [user, setUser] = useState(0);\n  let [comp, setComp] = useState(0);\n  let [weapons, setWeapons] = useState({\n    user: \"\",\n    computer: \"\"\n  });\n  let whichWeapon = weapon => {\n    if (weapon === \"s\") return \"scissors\";\n    if (weapon === \"p\") return \"paper\";\n    if (weapon === \"r\") return \"rock\";\n  };\n  const whoWin = u => {\n    const arr = [\"p\", \"s\", \"r\"];\n    const c = arr[Math.abs(Math.round(Math.random() * arr.length - 1))];\n    if (u === c) setScore(`Tie`);\n    if (u === \"p\" && c === \"s\") {\n      setScore(\"Paper is cut by scissors. You lost :(\");\n      setComp(comp + 1);\n    }\n    if (u === \"s\" && c === \"p\") {\n      setScore(\"Scissors cut paper. You won :)\");\n      setUser(user + 1);\n    }\n    if (u === \"r\" && c === \"p\") {\n      setScore(\"Rock is covered by paper. You lost :(\");\n      setComp(comp + 1);\n    }\n    if (u === \"p\" && c === \"r\") {\n      setScore(\"Paper covers rock. You won :)\");\n      setUser(user + 1);\n    }\n    if (u === \"s\" && c === \"r\") {\n      setScore(\"Scissors is broken by rock. You lost :(\");\n      setComp(comp + 1);\n    }\n    if (u === \"r\" && c === \"s\") {\n      setScore(\"Rock break scissors. You won :)\");\n      setUser(user + 1);\n    }\n    setWeapons({ ...weapons, user: whichWeapon(u), computer: whichWeapon(c) });\n  };\n  const getWeapon = e => {\n    const u = e.currentTarget.id;\n    whoWin(u);\n  };\n\n  return (\n    <Body>\n      <header>\n        <h1>Rock Paper Scissors</h1>\n      </header>\n      <ScoreBoard>\n        <Badge id=\"user-label\" className=\"badge\">\n          user\n        </Badge>\n        <Badge id=\"computer-label\" className=\"badge\">\n          comp\n        </Badge>\n        <span id=\"user-score\">{user}</span>:\n        <span id=\"computer-score\">{comp}</span>\n      </ScoreBoard>\n      <Result>\n        <p>{score}</p>\n      </Result>\n      <Choices>\n        <Choice id=\"r\" onClick={getWeapon}>\n          <img src={rock} alt=\"rock\" />\n        </Choice>\n        <Choice id=\"s\" onClick={getWeapon}>\n          <img src={scissors} alt=\"scissors\" />\n        </Choice>\n        <Choice id=\"p\" onClick={getWeapon}>\n          <img src={paper} alt=\"paper\" />\n        </Choice>\n      </Choices>\n\n      {weapons.user ? (\n        <p id=\"action-msg\">\n          Your weapon is '{weapons.user}'. Computer weapon is '\n          {weapons.computer}'.\n        </p>\n      ) : (\n        <h1 style={{ color: \"green\", textAlign: \"center\" }}>\n          Created by Automedon\n        </h1>\n      )}\n    </Body>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}